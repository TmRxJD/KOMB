#Welcome to KOMB! The Klipper Optimized Macro for Brushing, here you will find options to control brushing sequences in many ways, and will work with both bed and gantry mounted brushes.
#Default behavior is to move from left to right, but this can be customized, you can move across either axis from either direction. You can also use the brush mid print but this depends on
#the tolerances of your printer and where the brush is located. Mid print brushing works much better with gantry mounted brushes but gives you less options for brushing patterns since you can
#only move horizontally in that configuration. Since PETG is known to dribble so much variables have been included to control retraction before, during and after iterations. 

#This Macro is a work in progress, not all combinations of variables have been tested. Any and all feedback to correct issues is greatly appreciated. 

[gcode_macro _KOMB_Variables]
description: User Variables for Nozzle_Brush macro

variable_verbose_enable:        True      # Enable verbose console output
variable_verbose_points:        True      # Set to true to display all generated points

variable_brush_location_x:      105       # X absolute location for bottom left corner of brush
variable_brush_location_y:      237       # Y absolute location for bottom left corner of brush. Set to 0 for gantry mounted brush on a bed slinger
variable_brush_location_z:      20        # Z absolute location for bottom left corner of brush, set to the point of the minimum depth you want brushing to occur at, Set to 0 for gantry mounted brush
variable_brush_size_x:          35        # Size of brush in mm on x_axis, set to 0 for straight horizontal movement, y must have a value
variable_brush_size_y:          4         # Size of brush in mm on y_axis, set to 0 for straight horizontal movement, x must have a value
variable_brush_size_z:          2         # Depth of brush in mm. Measure to ensure nozzle doesn't dip too far. Should be set to max distance you want to allow nozzle to lower
variable_z_hop_height:          5         # Distance from brush to raise nozzle to before lowering to brush, relative. Set to 0 to disable
variable_step:                  1         # Distance in mm between strokes, doesn't apply if using horizontal strokes
variable_z_step:                1         # When using repeat, will lower the nozzle to the lowest point in this number of steps in mm after each iteration. Set to 0 to disable
variable_offset:                0         # Distance in mm to offset starting and ending strokes, use if you want nozzle strokes to start and end further from the brush
variable_repeat:                1         # Number of times to repeat the sequence
variable_reverse_enable:        False     # Repeat same pattern back in reverse when nozzle reaches other size of brush
variable_speed:                 250       # Speed between brush strokes
variable_speed_up:              25        # When using repeat, increase or decrease the speed by this amount for each iteration
variable_travel_speed:          350       # Speed for travel move to brush location
variable_pattern:               1         # Pattern number. 1: Diagonal sweep. must be set to 1 for now, more patterns soon to come!  
variable_angle:                 45        # Specify angle in degrees for diagonal movements with Pattern 1
variable_start_opposite_side:   False     # Start from opposite side
variable_start_adjacent_side:   False     # Move across the y axis instead of x. Or move along a vertical path instead of horizontal
variable_auto_home_enable:      True      # Automatically home printer if it isn't already
variable_clean_while_cold:      True      # Allow nozzle cleaning while nozzle is cold. Set to false to only allow cleaning while hot
variable_auto_heat_nozzle:      False     # Automatically heat nozzle before brushing if nozzle is cold and clean while cold set to False
variable_retract_before_wipe:   1         # Retract filament Xmm before starting brushing sequence when heated, set to 0 to disable,
variable_retract_during_wipe:   0.5       # Retracts filament Xmm between brush strokes when heated, set to 0 to disable
variable_retract_after_wipe:    3         # Retract filament Xmm after brushing when heated, set to 0 to disable
variable_temp:                  170       # Minimum temperature to allow brushing at, will also be heated to this temp if using Auto Heat

gcode: 
    { action_respond_info(" Running the KOMB_Variables macro does nothing, it is only used for storing settings :) ") }

[gcode_macro KOMB]
gcode:
    { action_respond_info("KOMBing Started!") }

    SAVE_GCODE_STATE NAME=clean_nozzle_state

    {% set vars = printer["gcode_macro _KOMB_Variables"] %}

    {% set x_min = params.Brush_Location_X|default(vars.brush_location_x)|float %}
    {% set size_x = params.Brush_Size_X|default(vars.brush_size_x)|float %}    
    {% set offset = params.Offset|default(vars.offset)|float %}
    {% set repeat = params.Repeat|default(vars.repeat) %}
    {% set y_min = params.Brush_Location_Y|default(vars.brush_location_y)|float %}
    {% set size_y = params.Brush_Size_Y|default(vars.brush_size_y)|float %}
    {% set step = params.Step_Size|default(vars.step)|float %}
    {% set reverse = params.Enable_Reverse|default(vars.reverse_enable)|string %}
    {% set z_max = params.Brush_Location_Z|default(vars.brush_location_z)|float %}
    {% set size_z = params.Brush_Size_Z|default(vars.brush_size_z)|float %}
    {% set z_step = params.Z_Step_Size|default(vars.z_step)|float %}
    {% set z_hop_height = params.Z_Hop_Height|default(vars.z_hop_height)|float %}
    {% set speed = params.Speed|default(vars.speed)|int %}
    {% set retract_before = params.Retract_Before_Wipe|default(vars.retract_before_wipe)|float %}
    {% set auto_home = params.Enable_Auto_Homing|default(vars.enable_auto_home)|string %}
    {% set opposite_side = params.Start_Opposite_Side|default(vars.start_opposite_side)|string %}
    {% set speed_up = params.Speed_Up_by|default(vars.speed_up)|int %}
    {% set retract_during = params.Retract_During_Wipe|default(vars.retract_during_wipe)|float %}
    {% set auto_heat = params.Auto_Heat_Nozzle|default(vars.auto_heat_nozzle)|string %}
    {% set adjacent_side = params.Start_Adjacent_Side|default(vars.start_adjacent_side)|string %}
    {% set travel_speed = params.Travel_Speed|default(vars.travel_speed)|int %}
    {% set retract_after = params.Retract_After_Wipe|default(vars.retract_after_wipe)|float %}
    {% set cold_clean = params.Clean_While_Cold|default(vars.clean_while_cold)|string %}
    {% set pattern = params.Pattern|default(vars.pattern) %}
    {% set verbose = params.Enable_Verbose_Output|default(vars.verbose_enable)|string %}
    {% set verbose_points = params.Enable_Verbose_Points|default(vars.verbose_points)|string %}
    {% set temp = params.Temperature|default(vars.temp) %}
    {% set angle = params.Angle|default(vars.angle) %}

    #Set Y or X brush size to current location if size and location set to 0
    {% if y_min == 0 %} 
        {% set y_min = printer.toolhead.position.y %}
        {% set y_max = printer.toolhead.position.y %}
    {% elif x_min == 0 %} 
        {% set x_min = printer.toolhead.position.y %}
        {% set x_max = printer.toolhead.position.y %}
    {% endif %}   

    {% set x_max, y_max, z_min = x_min + size_x, y_min + size_y, z_max - size_z | float %}

    # Verbose Output: Print all axis min/max and z_hop height
    {% if verbose|lower == "true" %}
        { action_respond_info("Brush Location: [Min: ({},{},{}), Max: ({},{},{})]. z_hop {}".format(
            (x_min), 
            (y_min),
            (z_min),
            (x_max), 
            (y_max),
            (z_max),
            (z_hop_height), 
        )) }
    {% endif %}

    # Verbose Output: Print calculated center values
    {% if verbose|lower == "true" %}
        { action_respond_info("Brush size: {}mm x {}mm x {}mm".format(
            (size_x),
            (size_y),
            (size_z),
        )) }
    {% endif %}

    #Recalcualte min/max with offset
    {% set x_min, y_min = x_min - offset, y_min - offset | float %} 
    {% set x_max, y_max = x_max + offset, y_max + offset | float %} 
    {% set z_hop = z_max + z_hop_height | float %}

    # Verbose Output: Print axis min/max and z_hop adjusted for offsets
    {% if verbose|lower == "true" %}
        { action_respond_info("Values adjusted for offsets [Min: ({},{},{}), Max: ({},{},{})], Z_Hop_Height: {}".format(
            (x_min), 
            (y_min),
            (z_min),
            (x_max), 
            (y_max),
            (z_max),
            (z_hop),
        )) }
    {% endif %}

    # Check if min/max exceed configured limits and correct to avoid errors.
    {% set x_min = x_min if x_min <= printer.toolhead.axis_maximum.x or x_min >= printer.toolhead.axis_minimum.x else printer.toolhead.axis_minimum.x %}
    {% set x_max = x_max if x_max >= printer.toolhead.axis_minimum.x or x_max <= printer.toolhead.axis_minimum.x else printer.toolhead.axis_maximum.x %}
    {% set y_min = y_min if y_min >= printer.toolhead.axis_minimum.y or y_min <= printer.toolhead.axis_minimum.y else printer.toolhead.axis_minimum.y %}
    {% set y_max = y_max if y_max <= printer.toolhead.axis_maximum.y or y_max >= printer.toolhead.axis_minimum.y else printer.toolhead.axis_maximum.y %}   
    {% set z_min = z_min if z_min >= printer.toolhead.axis_minimum.z or z_min <= printer.toolhead.axis_minimum.z else printer.toolhead.axis_minimum.z %}
    {% set z_max = z_max if z_max <= printer.toolhead.axis_maximum.z or z_max >= printer.toolhead.axis_maximum.z else printer.toolhead.axis_maximum.z %}
    {% set z_hop = z_hop if z_hop >= printer.toolhead.axis_minimum.z or z_hop <= printer.toolhead.axis_maximum.z else z_max %}
    
    {% set z_min = printer.toolhead.position.z if size_z == 0 and z_min == 0 else z_min %}
    {% set z_max = printer.toolhead.position.z if size_z == 0 and z_max == 0 else z_max %}

    # Verbose Output: Print adjusted axis min, max values
    {% if verbose|lower == "true" %}
        { action_respond_info("Values adjusted for axis limits: [Min: ({},{},{}), Max: ({},{},{})]. Z_Hop Height: {}".format(
            (x_min), 
            (y_min),
            (z_min),
            (x_max), 
            (y_max),
            (z_max),
            (z_hop), 
        )) }
    {% endif %}

    #Adjust brush size based on recalculated min/max values
    {% set size_x = x_max - x_min | round(1) %}
    {% set size_y = y_max - y_min | round(1) %}
    {% set size_z = z_max - z_min | round(1) %}  

    # Verbose Output: Print calculated center values
    {% if verbose|lower == "true" %}
        { action_respond_info("Adjusted brush size: {}mm x {}mm x {}mm".format(
            (size_x),
            (size_y),
            (size_z),
        )) }
    {% endif %}

    #Set X brush size to current location if size set to 0
    {% if x_min == 0 and size_x == 1 %} 
        {% set x_min = printer.toolhead.position.x %}
        {% set x_max = printer.toolhead.position.x %}
        # Verbose Output: Print calculated adjusted values
        {% if verbose|lower == "true" %}
            { action_respond_info("Adjusted X to Min: {}, Max: {}, Brush_Size: {}".format(
                (x_min),
                (x_max),
                (size_x),
            )) }
        {% endif %}
    #Set Y brush size to current location if size set to 0
    {% elif y_min == 0 and size_y == 1 %} 
        {% set y_min = printer.toolhead.position.y %}
        {% set y_max = printer.toolhead.position.y %}
        # Verbose Output: Print calculated adjusted values
        {% if verbose|lower == "true" %}
            { action_respond_info("Adjusted Y to Min: {}, Max: {}, Brush_Size: {}".format(
                (y_min),
                (y_max),
                (size_y),
            )) }
        {% endif %}
    {% endif %}

    {% set x_center, y_center, z_center = (x_min + x_max) / 2, (y_min + y_max) / 2, (z_min + z_max) / 2 | round(1) %}

    # Verbose Output: Print calculated center values
    {% if verbose|lower == "true" %}
        { action_respond_info("Center: X:{}, Y:{}, Z:{}".format(
            (x_center),
            (y_center),
            (z_center),
        )) }
    {% endif %}

    # Calculate aspect ratio
    {% set long_side = size_x if size_x >= size_y else size_y %}
    {% set short_side = size_y if size_y <= size_x else size_x %}
    {% set aspect_ratio = long_side / short_side | round(1) if short_side != 0 else long_side / 1 %}

    # Verbose Output: Print longer step and longer brush side
    {% if verbose|lower == "true" %}
        { action_respond_info("Longer_Side: {}mm, Shorter_Side: {}mm, Aspect_Ratio: {}:{} ({})".format(
            (long_side),
            (short_side),
            (long_side),
            (short_side),
            (aspect_ratio),
        )) }
    {% endif %}

    # Taylor series approximations for sin and cos for performing diagonal movement calculations 
    {% set angle_rad = angle | float * 3.141592653589793 / 180.0 | float | round(5) %}
    {% set sin_angle = angle_rad - (angle_rad**3)/6 + (angle_rad**5)/120|float %}
    {% set cos_angle = 1 - (angle_rad**2)/2 + (angle_rad**4)/24|float %} 

    # Verbose Output: Print values to use for diagonal calculations
    {% if verbose|lower == "true" %}
        { action_respond_info("Angle_Radians: {}, Sin_Angle: {}, Cos_Angle: {}".format(
            (angle_rad),
            (sin_angle),
            (cos_angle),
        )) }
    {% endif %}

    {% if pattern == 1 %}    
        # Verbose Output: Print pattern #
        {% if verbose|lower == "true" %}
            { action_respond_info("Pattern {}".format(
                (pattern),
            )) }
        {% endif %} 

        {% set r_val = retract_before if printer.extruder.temperature >= temp else 0 %}
        # Verbose Output: Print retraction values
        {% if verbose|lower == "true" %}
            { action_respond_info("Retraction: Before_Wipe: {}, During_Wipe: {}, After-Wipe: {}, R_Val: {}".format(
                (retract_before * -1),
                (retract_during * -1),
                (retract_after * -1),
                (r_val),
            )) }
        {% endif %}

        {% set points = [] %}
        {% set start_pos = [] %}
        {% set f_val = speed %}
        {% set ns = namespace() %}
        {% set ns.nozzle_pos = [x_min, y_min, z_max, r_val, f_val] if opposite_side|lower == "false" else [x_max, y_max, z_max, r_val, f_val] %}
        {% set nozzle_pos = ns.nozzle_pos %}
        {% set _ = points.append(ns.nozzle_pos) %}
        {% set _ = start_pos.append(ns.nozzle_pos) %}
             
        # Calculate the number of steps in all directions 
        {% set long_points = long_side / step | round if size_y != 0 or size_x != 0 else 1 %}
        {% set short_points = short_side / step | round %}

        # Verbose Output: Print points and position
        {% if verbose|lower == "true" %}
            { action_respond_info("Long_Points: {}, Short_Points: {}\nNozzle_Position: {}\nPoints: {}".format(
                (long_points),
                (short_points),
                (nozzle_pos),
                (points),
            )) }
        {% endif %}      

        {% if verbose_points|lower == "true" %}
            { action_respond_info("Starting Position: {}".format(
                (start_pos),
            )) }
        {% endif %}  

        {% for r in range(1 + repeat|int) %} 
            {% for i in range(long_points|int) %}
                # Generate 1st point
                {% if adjacent_side|lower == "false" %}
                    {% if opposite_side|lower == "false" %} 
                        {% set x_val = nozzle_pos[0] + size_y + i | round(2) if size_y != 0 else nozzle_pos[0] + size_x + i %}
                        {% set y_val = nozzle_pos[1] + size_y %}
                    {% else %} # If opposite_side = true and adjacent side = false
                        {% set x_val = nozzle_pos[0] - size_y - i | round(2) if size_y != 0 else nozzle_pos[0] - size_x - i %}
                        {% set y_val = nozzle_pos[1] - size_y %}
                    {% endif %}
                {% else %}
                    {% if opposite_side|lower == "false" %}
                        {% set x_val = nozzle_pos[0] + size_y %}
                        {% set y_val = nozzle_pos[1] + size_y + i | round(2) if size_y != 0 else nozzle_pos[0] + size_x + i %}
                    {% else %} # If opposite_side = true and adjacent side = true
                        {% set x_val = nozzle_pos[0] - size_y %}
                        {% set y_val = nozzle_pos[1] - size_y - i | round(2) if size_y != 0 else nozzle_pos[0] - size_x - i %}
                    {% endif %}
                {% endif %}
                {% set z_val = ns.nozzle_pos[2] if nozzle_pos[2] != 0 else printer.toolhead.position.z %} 
                {% set r_val = 0 %}
                {% set f_val = ns.nozzle_pos[4] %}
                {% set nozzle_pos = [x_val, y_val, z_val, r_val, f_val] %}
                {% set _ = points.append(nozzle_pos) %}
                # Generate 2nd point
                {% if adjacent_side|lower == "false" %}
                    {% if opposite_side|lower == "false" %}
                        {% set x_val2 = x_min + (step * cos_angle) + i | round(2) if size_y != 0 else x_min %}
                        {% set y_val2 = y_min %}
                    {% else %} 
                        {% set x_val2 = x_min - (step * cos_angle) - i | round(2) if size_y != 0 else x_min %}
                        {% set y_val2 = y_min %}   
                    {% endif %}
                {% else %} 
                    {% if opposite_side|lower == "false" %}
                        {% set x_val2 = y_min %}
                        {% set y_val2 = x_min + (step * sin_angle) + i | round(2) if size_y != 0 else x_min %}   
                    {% else %} 
                        {% set x_val2 = y_min %}
                        {% set y_val2 = x_min - (step * sin_angle) - i | round(2) if size_y != 0 else x_min %}      
                    {% endif %}
                {% endif %}
                {% set nozzle_pos2 = [x_val2, y_val2, z_val, r_val, f_val] %}
                {% set _ = points.append(nozzle_pos2) %}
            {% endfor %}

            {% if reverse|lower == "true" %}
                {% for i in range(long_points) %}
                    {% if adjacent_side|lower == "false" %}
                        {% if opposite_side|lower == "false" %}
                            {% set x_val = nozzle_pos[0] - size_y - i | round(2) if size_y != 0 else nozzle_pos[0] - size_x - i %}
                            {% set y_val = nozzle_pos[1] - size_y %}
                        {% else %}
                            {% set x_val = nozzle_pos[0] + size_y + i | round(2) if size_y != 0 else nozzle_pos[0] + size_x + i %}
                            {% set y_val = nozzle_pos[1] + size_y %}
                        {% endif %}
                    {% else %}
                        {% if opposite_side|lower == "false" %}
                            {% set x_val = nozzle_pos[0] - size_y %}
                            {% set y_val = nozzle_pos[1] - size_y - i | round(2) if size_y != 0 else nozzle_pos[0] - size_x - i %}
                        {% else %}
                            {% set x_val = nozzle_pos[0] + size_y %}
                            {% set y_val = nozzle_pos[1] + size_y + i | round(2) if size_y != 0 else nozzle_pos[0] + size_x + i %}
                        {% endif %}
                    {% endif %}
                    {% set z_val = ns.nozzle_pos[2] if nozzle_pos[2] != 0 else printer.toolhead.position.z %}
                    {% set r_val = 0 %}
                    {% set f_val = ns.nozzle_pos[4] %}
                    {% set nozzle_pos = [x_val, y_val, z_val, r_val, f_val] %}
                    {% set _ = points.append(nozzle_pos) %}
                    {% if adjacent_side|lower == "false" %}
                        {% if opposite_side|lower == "false" %}
                            {% set x_val2 = x_max - (step * cos_angle) - i | round(2) if size_y != 0 else x_max %}
                            {% set y_val2 = y_max %}
                        {% else %} 
                            {% set x_val2 = x_max + (step * cos_angle) + i | round(2) if size_y != 0 else x_max %}
                            {% set y_val2 = y_max %} 
                        {% endif %}
                    {% else %} 
                        {% if opposite_side|lower == "false" %}
                            {% set x_val2 = y_max %}
                            {% set y_val2 = x_max - (step * sin_angle) - i | round(2) if size_y != 0 else x_max %}     
                        {% else %} 
                            {% set x_val2 = y_max %}
                            {% set y_val2 = x_max + (step * sin_angle) + i | round(2) if size_y != 0 else x_max %}      
                        {% endif %}
                    {% endif %}
                    {% set nozzle_pos2 = [x_val2, y_val2, z_val, r_val, f_val] %}
                    {% set _ = points.append(nozzle_pos2) %}
                {% endfor %}
            {% endif %} 
            {% set z_val = (ns.nozzle_pos[2] - z_step) if ns.nozzle_pos[2] - z_step >= z_min else start_pos[2] %}
            {% set r_val = retract_during if printer.extruder.temperature >= temp else 0 %}
            {% set f_val = nozzle_pos[4] + speed_up + r %}
            {% set ns.nozzle_pos = [nozzle_pos[0], nozzle_pos[1], z_val, r_val, f_val] %}
            {% set _ = points.append(ns.nozzle_pos) %}
        {% endfor %}
    {% endif %}

    #if not homed and auto home is set to true then home the printer
    {% if not 'xyz' in printer.toolhead.homed_axes and auto_home|lower == "true" %}
        {% set homed = "false" %}
        G28    
        {% if verbose|lower == "true" %}
            { action_respond_info("Homing..") }
        {% endif %}
    {% elif not 'xyz' in printer.toolhead.homed_axes and auto_home|lower == "false" %}
        {% set homed = "false" %}
        RESPOND MSG="Printer must be homed first!"
    {% elif 'xyz' in printer.toolhead.homed_axes %}
         {% set homed = "true" %}
    {% endif %}

    # Verbose Output: Print auto statuses
    {% if verbose|lower == "true" %}
        { action_respond_info("Auto_Home Status: {}, Auto_Heat Status: {}. Homed_Status: {}".format(
            (auto_home),
            (auto_heat),
            (homed),
        )) }
    {% endif %}

    {% if cold_clean|lower == "false" %}
        {% if auto_heat|lower == "true" and printer.extruder.temperature < temp %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp + 1}
            # Verbose Output: Print target temp
            {% if verbose|lower == "true" %}
                { action_respond_info("Bed heating to: {}".format(
                    (temp),
                )) }
            {% endif %}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM=temp
            G1 E{retract_before}
        {% endif %}
    {% endif %}

    G90
    G0 Z{z_hop}
    G0 X{points[0][0]} Y{points[0][1]} F{travel_speed * 60}
    G0 Z{points[0][2]}
    {% if printer.extruder.temperature >= temp %}
        G1 E{retract_before * -1}
    {% endif %}

    # Verbose Output:
    {% if verbose_points|lower == "true" %}
        { action_respond_info("Starting position: X: {}, Y: {}, Z: {}, R: {}, F: {}".format(
            (points[0][0]), 
            (points[0][1]), 
            (points[0][2]),
            (points[0][3] * -1),
            (points[0][4] * 60),
        )) }
    {% endif %}

    {% for point in points[1:] %}
       # G1 X{point[0]} Y{point[1]} Z{point[2]} E{point[3]} F{point[4] * 60}
        # Verbose Output:
        {% if verbose_points|lower == "true" %}
            { action_respond_info("Moving to X: {}, Y: {}, Z: {}, R: {}, F: {}".format(
                (point[0]), 
                (point[1]), 
                (point[2]),
                (point[3] * -1),
                (point[4] * 60),
            )) }
        {% endif %}
    {% endfor %}
    {% if printer.extruder.temperature >= temp %}
        G1 E{retract_after * -1}
    {% endif %}

    # Verbose Output: Print points after movement loop
    {% if verbose|lower == "true" %}
        { action_respond_info("KOMBing Completed!") }
    {% endif %}

    RESTORE_GCODE_STATE NAME=clean_nozzle_state

